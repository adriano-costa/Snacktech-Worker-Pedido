# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore ./src/WorkerServiceSolution.sln
    - name: Build
      run: dotnet build ./src/WorkerService/WorkerService.csproj --configuration Release

    - name: Test
      run: dotnet test ./src/WorkerService.Tests/WorkerService.Tests.csproj --configuration Release --collect:"XPlat Code Coverage" --logger:"trx;LogFileName=../TestResults.trx" 
      
    - name: Extract Code Coverage
      run: |
        # Install reportgenerator
        dotnet tool install --global reportgenerator
    
        # Generate a HTML report from the TRX file.  Adjust paths as needed.
        reportgenerator -reports:../TestResults.trx -targetdir:./CoverageReport -reporttypes:Html
    
        # Extract coverage percentage from the HTML report. This is a bit fragile as HTML structure can change.
        #  A more robust method would use a proper XML report if reportgenerator supports it.
        coverage_percentage=$(grep -oP '(?<=Coverage: )[0-9.]+(?=%' ./CoverageReport/index.htm)
    
        # Print the coverage percentage to the console
        echo "Code Coverage: $coverage_percentage%"
      
    # - name: Upload coverage percentage as artifact for badge
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: coverage-percentage
    #     path: ${{ steps.coverage.outputs.percentage }}
