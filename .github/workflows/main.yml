# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore ./src/WorkerServiceSolution.sln
    - name: Build
      run: dotnet build ./src/WorkerService/WorkerService.csproj --configuration Release

    - name: Test
      run: dotnet test ./src/WorkerService.Tests/WorkerService.Tests.csproj --configuration Release --collect:"XPlat Code Coverage" --logger:"trx;LogFileName=../TestResults.trx" 
    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.3
      with:
        reports: './**/coverage.cobertura.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: './coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;Cobertura' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, OpenCover, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, Html_BlueRed_Summary, JsonSummary, CodeClimate, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownAssembliesSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, SvgChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
    
    - name: Extract Coverage Percentage
      id: coverage
      run: |
        coverage_percentage=$(jq -r '.coverage.line-rate * 100' ./coveragereport/Cobertura.xml | cut -d '.' -f 1)
        echo "::set-output name=percentage::$coverage_percentage"
      
    - name: Display Coverage Percentage
      run: |
        echo "Coverage Percentage: ${{ steps.coverage.outputs.percentage }}%"
      
    # - name: Upload coverage percentage as artifact for badge
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: coverage-percentage
    #     path: ${{ steps.coverage.outputs.percentage }}
